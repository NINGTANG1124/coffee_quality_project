# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GztWwqy7UXhuRoPMeDiZ5kCMYC6FrNnb
"""

from google.colab import drive; drive.mount('/content/drive')

import pandas as pd

#读取我的文件
data = pd.read_csv('/content/drive/MyDrive/coffee_quality_project/coffee_ratings.csv')
print(data.head())

#1.数据清理
#检查数据类型和基本信息
print(data.info())

#检查缺失值
print(data.isnull().sum())

#检查重复值
print(data.duplicated().sum())

#2.生成统计摘要
#数据统计摘要
print(data.describe())

#按国家统计平均评分
country_avg = data.groupby('country_of_origin')['total_cup_points'].mean()
print(country_avg)

#3.数据可视化
import seaborn as sns
import matplotlib.pyplot as plt

#绘制评分分布直方图
# 检查数据基本统计信息
data_stats = data['total_cup_points'].describe()
data_stats

# 移除异常值（total_cup_points > 60）
data_cleaned = data[data['total_cup_points'] > 60]

# 绘制移除异常值后的直方图
plt.figure(figsize=(10, 6))
sns.histplot(data_cleaned['total_cup_points'], kde=True, bins=20)
plt.title("Distribution of Coffee Ratings (Cleaned)", fontsize=16)
plt.xlabel("Total Cup Points", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()

#选择样本数前 10 的国家
top_countries = data_cleaned['country_of_origin'].value_counts().head(10).index
top_country_data = data_cleaned[data_cleaned['country_of_origin'].isin(top_countries)]

# 绘制高样本国家箱线图
plt.figure(figsize=(12, 8))
sns.boxplot(data=top_country_data, x='country_of_origin', y='total_cup_points')
plt.title("Top 10 Countries by Coffee Ratings", fontsize=16)
plt.xlabel("Country of Origin", fontsize=12)
plt.ylabel("Total Cup Points", fontsize=12)
plt.xticks(rotation=45)
plt.show()

# 低样本国家单独分析
low_sample_countries = data_cleaned['country_of_origin'].value_counts()
low_sample_countries = low_sample_countries[low_sample_countries < 10].index
low_sample_data = data_cleaned[data_cleaned['country_of_origin'].isin(low_sample_countries)]

# 绘制低样本国家的评分分布
plt.figure(figsize=(12, 6))
sns.histplot(low_sample_data['total_cup_points'], kde=True, bins=10)
plt.title("Coffee Ratings for Low-Sample Countries", fontsize=16)
plt.xlabel("Total Cup Points", fontsize=12)
plt.ylabel("Count")
plt.show()

#字段相关性热力图：
# 过滤无效评分
data_cleaned = data[data['total_cup_points'] > 60]

# 筛选数值型字段
numeric_data = data_cleaned.select_dtypes(include=['float64', 'int64'])

# 检查数值字段
print(numeric_data.info())

# 计算相关性矩阵
correlation_matrix = numeric_data.corr()

# 绘制热力图
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix, annot=True, cmap='RdBu_r', fmt=".2f", annot_kws={"size": 8}, center=0)
plt.title("Correlation Heatmap of Coffee Ratings Data", fontsize=16)
plt.xticks(rotation=45, fontsize=10, ha='right')
plt.yticks(fontsize=10)
plt.show()